import React from 'react';
import TestRenderer from 'react-test-renderer';
import { decorateRender } from './decorate-render';

describe('decorateRender', () => {
  describe('applied to regular component (class)', () => {
    let RegularComponent;

    beforeEach(() => {
      // eslint-disable-next-line react/prefer-stateless-function
      RegularComponent = class extends React.Component {
        render() {
          return <div {...this.props} />;
        }
      };
    });

    it('should return decorated component equal to original one by reference', () => {
      const propsInjector = () => () => {};

      expect(decorateRender(propsInjector)(RegularComponent)).toBe(RegularComponent);
    });

    it('should pass props to propsInjector on render', () => {
      const propsInjector = jest.fn(() => () => null);
      const Decorated = decorateRender(propsInjector)(RegularComponent);

      const props = { quux: 123, plugh: true };
      TestRenderer.create(<Decorated {...props} />);

      expect(propsInjector).toBeCalledWith(props);
    });

    it('should inject props generated by propsInjector to resulting virtual dom', () => {
      const propsInjector = (props) => (result) => React.cloneElement(
        result,
        { ...props, 'data-devirt-type': 'Regular' },
      );
      const Decorated = decorateRender(propsInjector)(RegularComponent);

      expect(TestRenderer.create(
        <Decorated quux />,
      ).toJSON()).toEqual(TestRenderer.create(
        <div quux data-devirt-type="Regular" />,
      ).toJSON());
    });
  });

  describe('applied to functional component', () => {
    let Functional;

    beforeEach(() => {
      Functional = (props) => <div {...props} />;
    });

    it('should pass props to propsInjector on render', () => {
      const propsInjector = jest.fn(() => () => null);
      const Decorated = decorateRender(propsInjector)(Functional);

      const props = { quux: 123, plugh: true };
      TestRenderer.create(<Decorated {...props} />);

      expect(propsInjector).toBeCalledWith(props);
    });

    it('should inject props generated by propsInjector to resulting virtual dom', () => {
      const propsInjector = (props) => (result) => React.cloneElement(
        result,
        { ...props, 'data-devirt-type': 'Functional' },
      );
      const Decorated = decorateRender(propsInjector)(Functional);

      expect(TestRenderer.create(
        <Decorated quux />,
      ).toJSON()).toEqual(TestRenderer.create(
        <div quux data-devirt-type="Functional" />,
      ).toJSON());
    });
  });
});
